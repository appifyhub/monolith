name: Build QA

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 100

      - name: Print build name
        run: echo "$GITHUB_ACTOR is building PR#$PR_NUMBER in '$GITHUB_REPOSITORY' (commit $GITHUB_SHA)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.m2/repository
          key: ${{ runner.os }}-dependency-cache

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Run KtLint
        run: ./gradlew ktlintCheck

      - name: Run OpenAPI validation
        run: |
          npm install -g --force @redocly/cli
          echo "Validating API docs..."
          redocly lint \
            --skip-rule=operation-4xx-response \
            --skip-rule=security-defined \
            --format=stylish \
            src/main/resources/static/docs/open-api/*.yaml
          redocly stats \
            --format=stylish \
            src/main/resources/static/docs/open-api/consumer.yaml
          redocly stats \
            --format=stylish \
            src/main/resources/static/docs/open-api/creator.yaml

      - name: Build and test service
        env:
          BUILD_QUALITY: "PR"
        run: ./gradlew build

      - name: Codacy Coverage Report
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh)

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag service

      - name: Auth for GitHub's Docker repository
        env:
          USER: ${{ secrets.PACKAGES_USER }}
          TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        run: docker login docker.pkg.github.com -u $USER -p $TOKEN

      - name: Tag Docker image
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          VERSION=$(scripts/prop.sh version)
          echo "Tagging images with version '$VERSION'..."
          docker tag service docker.pkg.github.com/$GITHUB_REPOSITORY/service:"$VERSION".pr_$PR_NUMBER
          docker tag service docker.pkg.github.com/$GITHUB_REPOSITORY/service:latest_pr
          docker tag service appifyhub/service:"$VERSION".pr_$PR_NUMBER
          docker tag service appifyhub/service:latest_pr

      - name: Publish Docker images to GitHub
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          VERSION=$(scripts/prop.sh version)
          echo "Publishing images with version '$VERSION'..."
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/service:"$VERSION".pr_$PR_NUMBER
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/service:latest_pr

      - name: Publish Docker images to DockerHub
        id: docker_publish
        env:
          USER: ${{ secrets.DOCKER_HUB_USER }}
          TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          VERSION=$(scripts/prop.sh version)
          docker login docker.io -u $USER -p $TOKEN
          echo "Publishing images with version '$VERSION'..."
          docker push appifyhub/service:"$VERSION".pr_$PR_NUMBER
          docker push appifyhub/service:latest_pr
          echo ::set-output name=service_version::"$VERSION"

      - name: Comment build information
        env:
          GITHUB_SHA: ${{ env.GITHUB_SHA }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_RUN_ID: ${{ env.GITHUB_RUN_ID }}
          GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
          GITHUB_SERVER_URL: ${{ env.GITHUB_SERVER_URL }}
          PR_NUMBER: ${{ github.event.number }}
          VERSION: ${{ steps.docker_publish.outputs.service_version }}
          DOCKER_IMG: "docker pull appifyhub/service"
        run: |
          NL=$'\n'
          CODE='```'
          DOCKER_VERSIONED="$DOCKER_IMG:$VERSION.pr_$PR_NUMBER"
          DOCKER_LATEST="# Valid until a new build${NL}${DOCKER_IMG}:latest_pr"
          CODE_BLOCK="${CODE}shell${NL}${DOCKER_LATEST}${NL}${DOCKER_VERSIONED}${NL}${CODE}"
          JOB="[${GITHUB_RUN_ID}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
          NOTIFICATION="Build ${JOB} complete for ${GITHUB_SHA}.${NL}${NL}${CODE_BLOCK}${NL}"
          gh pr comment "$PR_NUMBER" -b "$NOTIFICATION"
