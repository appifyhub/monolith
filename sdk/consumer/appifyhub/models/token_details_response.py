# coding: utf-8

"""
    Appify Hub's Consumer API

    The full specification of the service's API used by the end-users.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from appifyhub.models.authority import Authority
from typing import Optional, Set
from typing_extensions import Self

class TokenDetailsResponse(BaseModel):
    """
    The decoded details of a token
    """ # noqa: E501
    token_value: StrictStr = Field(description="The value of the token")
    user_id: StrictStr = Field(description="A unique user identifier within the project. Depending on the project configuration, it can be differently formatted or even auto-generated. ")
    project_id: StrictInt = Field(description="A unique project identifier")
    universal_id: StrictStr = Field(description="The universal ID of the object (user ID and project ID separated by a dollar sign)")
    created_at: StrictStr = Field(description="The time the object was created (based on ISO 8601)")
    expires_at: StrictStr = Field(description="The time the token expires (based on ISO 8601)")
    authority: Authority
    is_blocked: StrictBool = Field(description="Whether the token is blocked or not")
    origin: Optional[StrictStr] = Field(default=None, description="The origin of the request")
    ip_address: Optional[StrictStr] = Field(default=None, description="The approximate IP address")
    geo: Optional[StrictStr] = Field(default=None, description="The approximate geographic location based on the IP address")
    is_static: StrictBool = Field(description="Whether the token is static or not (i.e. API key)")
    __properties: ClassVar[List[str]] = ["token_value", "user_id", "project_id", "universal_id", "created_at", "expires_at", "authority", "is_blocked", "origin", "ip_address", "geo", "is_static"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token_value": obj.get("token_value"),
            "user_id": obj.get("user_id"),
            "project_id": obj.get("project_id"),
            "universal_id": obj.get("universal_id"),
            "created_at": obj.get("created_at"),
            "expires_at": obj.get("expires_at"),
            "authority": obj.get("authority"),
            "is_blocked": obj.get("is_blocked"),
            "origin": obj.get("origin"),
            "ip_address": obj.get("ip_address"),
            "geo": obj.get("geo"),
            "is_static": obj.get("is_static")
        })
        return _obj


