# coding: utf-8

"""
    Appify Hub's Consumer API

    The full specification of the service's API used by the end-users.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from appifyhub.models.settable_request import SettableRequest
from typing import Optional, Set
from typing_extensions import Self

class OrganizationUpdaterDto(BaseModel):
    """
    A request to update the organization. Only the fields that are explicitly set will be updated. For expected data types, check the [OrganizationDto](#/components/schemas/OrganizationDto). 
    """ # noqa: E501
    name: Optional[SettableRequest] = None
    street: Optional[SettableRequest] = None
    postcode: Optional[SettableRequest] = None
    city: Optional[SettableRequest] = None
    country_code: Optional[SettableRequest] = None
    __properties: ClassVar[List[str]] = ["name", "street", "postcode", "city", "country_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationUpdaterDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of street
        if self.street:
            _dict['street'] = self.street.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postcode
        if self.postcode:
            _dict['postcode'] = self.postcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of city
        if self.city:
            _dict['city'] = self.city.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country_code
        if self.country_code:
            _dict['country_code'] = self.country_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationUpdaterDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": SettableRequest.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "street": SettableRequest.from_dict(obj["street"]) if obj.get("street") is not None else None,
            "postcode": SettableRequest.from_dict(obj["postcode"]) if obj.get("postcode") is not None else None,
            "city": SettableRequest.from_dict(obj["city"]) if obj.get("city") is not None else None,
            "country_code": SettableRequest.from_dict(obj["country_code"]) if obj.get("country_code") is not None else None
        })
        return _obj


