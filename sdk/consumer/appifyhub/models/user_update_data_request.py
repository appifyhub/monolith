# coding: utf-8

"""
    Appify Hub's Consumer API

    The full specification of the service's API used by the end-users.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from appifyhub.models.organization_updater_settable import OrganizationUpdaterSettable
from appifyhub.models.settable_request import SettableRequest
from typing import Optional, Set
from typing_extensions import Self

class UserUpdateDataRequest(BaseModel):
    """
    A request to update the user's data. Only the fields that are explicitly set will be updated. For expected data types, check the [UserSignupRequest](#/components/schemas/UserSignupRequest). 
    """ # noqa: E501
    name: Optional[SettableRequest] = None
    type: Optional[SettableRequest] = None
    allows_spam: Optional[SettableRequest] = None
    contact: Optional[SettableRequest] = None
    contact_type: Optional[SettableRequest] = None
    birthday: Optional[SettableRequest] = None
    company: Optional[OrganizationUpdaterSettable] = None
    language_tag: Optional[SettableRequest] = None
    __properties: ClassVar[List[str]] = ["name", "type", "allows_spam", "contact", "contact_type", "birthday", "company", "language_tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserUpdateDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allows_spam
        if self.allows_spam:
            _dict['allows_spam'] = self.allows_spam.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_type
        if self.contact_type:
            _dict['contact_type'] = self.contact_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of birthday
        if self.birthday:
            _dict['birthday'] = self.birthday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_tag
        if self.language_tag:
            _dict['language_tag'] = self.language_tag.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserUpdateDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": SettableRequest.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "type": SettableRequest.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "allows_spam": SettableRequest.from_dict(obj["allows_spam"]) if obj.get("allows_spam") is not None else None,
            "contact": SettableRequest.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "contact_type": SettableRequest.from_dict(obj["contact_type"]) if obj.get("contact_type") is not None else None,
            "birthday": SettableRequest.from_dict(obj["birthday"]) if obj.get("birthday") is not None else None,
            "company": OrganizationUpdaterSettable.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "language_tag": SettableRequest.from_dict(obj["language_tag"]) if obj.get("language_tag") is not None else None
        })
        return _obj


