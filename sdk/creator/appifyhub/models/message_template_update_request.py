# coding: utf-8

"""
    Appify Hub's Creator API

    The full specification of the service's API used by the project administrators.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from appifyhub.models.settable_request import SettableRequest
from typing import Optional, Set
from typing_extensions import Self

class MessageTemplateUpdateRequest(BaseModel):
    """
    A request to update a message template. Only the fields that are explicitly set will be updated. For expected data types, check the [MessageTemplateCreateRequest](#/components/schemas/MessageTemplateCreateRequest). 
    """ # noqa: E501
    name: Optional[SettableRequest] = None
    language_tag: Optional[SettableRequest] = None
    title: Optional[SettableRequest] = None
    content: Optional[SettableRequest] = None
    is_html: Optional[SettableRequest] = None
    __properties: ClassVar[List[str]] = ["name", "language_tag", "title", "content", "is_html"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageTemplateUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_tag
        if self.language_tag:
            _dict['language_tag'] = self.language_tag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_html
        if self.is_html:
            _dict['is_html'] = self.is_html.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageTemplateUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": SettableRequest.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "language_tag": SettableRequest.from_dict(obj["language_tag"]) if obj.get("language_tag") is not None else None,
            "title": SettableRequest.from_dict(obj["title"]) if obj.get("title") is not None else None,
            "content": SettableRequest.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "is_html": SettableRequest.from_dict(obj["is_html"]) if obj.get("is_html") is not None else None
        })
        return _obj


