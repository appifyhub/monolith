# coding: utf-8

"""
    Appify Hub's Creator API

    The full specification of the service's API used by the project administrators.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from appifyhub.models.settable_request import SettableRequest
from typing import Optional, Set
from typing_extensions import Self

class ProjectUpdateRequest(BaseModel):
    """
    A request to update a project. Only the fields that are explicitly set will be updated. For expected data types, check the [ProjectResponse](#/components/schemas/ProjectResponse). 
    """ # noqa: E501
    type: Optional[SettableRequest] = None
    status: Optional[SettableRequest] = None
    name: Optional[SettableRequest] = None
    description: Optional[SettableRequest] = None
    logo_url: Optional[SettableRequest] = None
    website_url: Optional[SettableRequest] = None
    max_users: Optional[SettableRequest] = None
    anyone_can_search: Optional[SettableRequest] = None
    on_hold: Optional[SettableRequest] = None
    language_tag: Optional[SettableRequest] = None
    requires_signup_codes: Optional[SettableRequest] = None
    max_signup_codes_per_user: Optional[SettableRequest] = None
    mailgun_config: Optional[SettableRequest] = None
    twilio_config: Optional[SettableRequest] = None
    firebase_config: Optional[SettableRequest] = None
    __properties: ClassVar[List[str]] = ["type", "status", "name", "description", "logo_url", "website_url", "max_users", "anyone_can_search", "on_hold", "language_tag", "requires_signup_codes", "max_signup_codes_per_user", "mailgun_config", "twilio_config", "firebase_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo_url
        if self.logo_url:
            _dict['logo_url'] = self.logo_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of website_url
        if self.website_url:
            _dict['website_url'] = self.website_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_users
        if self.max_users:
            _dict['max_users'] = self.max_users.to_dict()
        # override the default output from pydantic by calling `to_dict()` of anyone_can_search
        if self.anyone_can_search:
            _dict['anyone_can_search'] = self.anyone_can_search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_hold
        if self.on_hold:
            _dict['on_hold'] = self.on_hold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_tag
        if self.language_tag:
            _dict['language_tag'] = self.language_tag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requires_signup_codes
        if self.requires_signup_codes:
            _dict['requires_signup_codes'] = self.requires_signup_codes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_signup_codes_per_user
        if self.max_signup_codes_per_user:
            _dict['max_signup_codes_per_user'] = self.max_signup_codes_per_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mailgun_config
        if self.mailgun_config:
            _dict['mailgun_config'] = self.mailgun_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of twilio_config
        if self.twilio_config:
            _dict['twilio_config'] = self.twilio_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firebase_config
        if self.firebase_config:
            _dict['firebase_config'] = self.firebase_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": SettableRequest.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "status": SettableRequest.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "name": SettableRequest.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "description": SettableRequest.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "logo_url": SettableRequest.from_dict(obj["logo_url"]) if obj.get("logo_url") is not None else None,
            "website_url": SettableRequest.from_dict(obj["website_url"]) if obj.get("website_url") is not None else None,
            "max_users": SettableRequest.from_dict(obj["max_users"]) if obj.get("max_users") is not None else None,
            "anyone_can_search": SettableRequest.from_dict(obj["anyone_can_search"]) if obj.get("anyone_can_search") is not None else None,
            "on_hold": SettableRequest.from_dict(obj["on_hold"]) if obj.get("on_hold") is not None else None,
            "language_tag": SettableRequest.from_dict(obj["language_tag"]) if obj.get("language_tag") is not None else None,
            "requires_signup_codes": SettableRequest.from_dict(obj["requires_signup_codes"]) if obj.get("requires_signup_codes") is not None else None,
            "max_signup_codes_per_user": SettableRequest.from_dict(obj["max_signup_codes_per_user"]) if obj.get("max_signup_codes_per_user") is not None else None,
            "mailgun_config": SettableRequest.from_dict(obj["mailgun_config"]) if obj.get("mailgun_config") is not None else None,
            "twilio_config": SettableRequest.from_dict(obj["twilio_config"]) if obj.get("twilio_config") is not None else None,
            "firebase_config": SettableRequest.from_dict(obj["firebase_config"]) if obj.get("firebase_config") is not None else None
        })
        return _obj


