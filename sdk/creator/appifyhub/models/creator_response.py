# coding: utf-8

"""
    Appify Hub's Creator API

    The full specification of the service's API used by the project administrators.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from appifyhub.models.organization_dto import OrganizationDto
from typing import Optional, Set
from typing_extensions import Self

class CreatorResponse(BaseModel):
    """
    A user's details
    """ # noqa: E501
    user_id: StrictStr = Field(description="The creator's unique ID")
    project_id: StrictInt = Field(description="A unique identifier for this consumer project")
    universal_id: StrictStr = Field(description="The universal ID of the object (creator ID and project ID separated by a dollar sign)")
    name: Optional[StrictStr] = Field(default=None, description="The name of the creator")
    type: StrictStr = Field(description="The type of the creator")
    authority: StrictStr = Field(description="The authority of the creator")
    allows_spam: StrictBool = Field(description="Whether the creator allows spam or not")
    contact: Optional[StrictStr] = Field(default=None, description="The contact of the creator")
    contact_type: StrictStr = Field(description="The type of contact for this creator")
    birthday: Optional[date] = Field(default=None, description="The birthday of the creator")
    company: Optional[OrganizationDto] = None
    language_tag: Optional[StrictStr] = Field(default=None, description="The default language of the creator (locale represented as in IETF BCP 47)")
    created_at: StrictStr = Field(description="The time the object was created (based on ISO 8601)")
    updated_at: StrictStr = Field(description="The time the object was last updated (based on ISO 8601)")
    __properties: ClassVar[List[str]] = ["user_id", "project_id", "universal_id", "name", "type", "authority", "allows_spam", "contact", "contact_type", "birthday", "company", "language_tag", "created_at", "updated_at"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PERSONAL', 'ORGANIZATION']):
            raise ValueError("must be one of enum values ('PERSONAL', 'ORGANIZATION')")
        return value

    @field_validator('authority')
    def authority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DEFAULT', 'MODERATOR', 'ADMIN', 'OWNER']):
            raise ValueError("must be one of enum values ('DEFAULT', 'MODERATOR', 'ADMIN', 'OWNER')")
        return value

    @field_validator('contact_type')
    def contact_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EMAIL', 'PHONE', 'CUSTOM']):
            raise ValueError("must be one of enum values ('EMAIL', 'PHONE', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatorResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatorResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "project_id": obj.get("project_id"),
            "universal_id": obj.get("universal_id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "authority": obj.get("authority"),
            "allows_spam": obj.get("allows_spam"),
            "contact": obj.get("contact"),
            "contact_type": obj.get("contact_type"),
            "birthday": obj.get("birthday"),
            "company": OrganizationDto.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "language_tag": obj.get("language_tag"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


