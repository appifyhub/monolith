# coding: utf-8

"""
    Appify Hub's Creator API

    The full specification of the service's API used by the project administrators.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from appifyhub.models.project_feature_response import ProjectFeatureResponse
from typing import Optional, Set
from typing_extensions import Self

class ProjectStateResponse(BaseModel):
    """
    A representation of the project's current state
    """ # noqa: E501
    status: StrictStr = Field(description="The status of the project")
    usable_features: List[ProjectFeatureResponse] = Field(description="The usable features of the project")
    unusable_features: List[ProjectFeatureResponse] = Field(description="The unusable features of the project")
    __properties: ClassVar[List[str]] = ["status", "usable_features", "unusable_features"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['REVIEW', 'ACTIVE', 'BLOCKED', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('REVIEW', 'ACTIVE', 'BLOCKED', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectStateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in usable_features (list)
        _items = []
        if self.usable_features:
            for _item in self.usable_features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['usable_features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unusable_features (list)
        _items = []
        if self.unusable_features:
            for _item in self.unusable_features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['unusable_features'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectStateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "usable_features": [ProjectFeatureResponse.from_dict(_item) for _item in obj["usable_features"]] if obj.get("usable_features") is not None else None,
            "unusable_features": [ProjectFeatureResponse.from_dict(_item) for _item in obj["unusable_features"]] if obj.get("unusable_features") is not None else None
        })
        return _obj


