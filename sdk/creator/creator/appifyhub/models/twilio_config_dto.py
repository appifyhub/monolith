# coding: utf-8

"""
    Appify Hub's Creator API

    The full specification of the service's API used by the project administrators.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class TwilioConfigDto(BaseModel):
    """
    Twilio account configuration, primarily used for SMS
    """ # noqa: E501
    account_sid: StrictStr = Field(description="An active account SID")
    auth_token: StrictStr = Field(description="A valid auth token")
    messaging_service_id: StrictStr = Field(description="A valid Messaging Service ID")
    max_price_per_message: StrictInt = Field(description="The maximum price per message (in USD)")
    max_retry_attempts: StrictInt = Field(description="The maximum retry attempts on message sending")
    default_sender_name: StrictStr = Field(description="The name of the default sender. Set to blank to clear")
    default_sender_number: StrictStr = Field(description="The phone number of the default sender")
    __properties: ClassVar[List[str]] = ["account_sid", "auth_token", "messaging_service_id", "max_price_per_message", "max_retry_attempts", "default_sender_name", "default_sender_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TwilioConfigDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TwilioConfigDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "auth_token": obj.get("auth_token"),
            "messaging_service_id": obj.get("messaging_service_id"),
            "max_price_per_message": obj.get("max_price_per_message"),
            "max_retry_attempts": obj.get("max_retry_attempts"),
            "default_sender_name": obj.get("default_sender_name"),
            "default_sender_number": obj.get("default_sender_number")
        })
        return _obj


