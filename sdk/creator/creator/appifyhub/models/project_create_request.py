# coding: utf-8

"""
    Appify Hub's Creator API

    The full specification of the service's API used by the project administrators.

    The version of the OpenAPI document: Latest
    Contact: contact@appifyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from appifyhub.models.firebase_config_dto import FirebaseConfigDto
from appifyhub.models.mailgun_config_dto import MailgunConfigDto
from appifyhub.models.project_type import ProjectType
from appifyhub.models.project_user_id_type import ProjectUserIDType
from appifyhub.models.twilio_config_dto import TwilioConfigDto
from typing import Optional, Set
from typing_extensions import Self

class ProjectCreateRequest(BaseModel):
    """
    A request to create a new project
    """ # noqa: E501
    type: ProjectType
    user_id_type: ProjectUserIDType
    owner_universal_id: StrictStr = Field(description="The universal ID of the object (creator ID and project ID separated by a dollar sign)")
    name: StrictStr = Field(description="The name of this consumer project")
    description: Optional[StrictStr] = Field(default=None, description="A short description of this consumer project")
    logo_url: Optional[StrictStr] = Field(default=None, description="The URL to this consumer project's logo")
    website_url: Optional[StrictStr] = Field(default=None, description="The URL to this consumer project's website")
    language_tag: Optional[StrictStr] = Field(default=None, description="The default language of the project (locale represented as in IETF BCP 47)")
    max_users: Optional[StrictInt] = Field(default=None, description="The maximum number of users allowed in the project")
    anyone_can_search: Optional[StrictBool] = Field(default=None, description="Whether any user can search for any other user or not in the project")
    requires_signup_codes: Optional[StrictBool] = Field(default=None, description="Whether this consumer project requires signup codes from users or not")
    max_signup_codes_per_user: Optional[StrictInt] = Field(default=None, description="The maximum number of signup codes that each user of this consumer project can create")
    mailgun_config: Optional[MailgunConfigDto] = None
    twilio_config: Optional[TwilioConfigDto] = None
    firebase_config: Optional[FirebaseConfigDto] = None
    __properties: ClassVar[List[str]] = ["type", "user_id_type", "owner_universal_id", "name", "description", "logo_url", "website_url", "language_tag", "max_users", "anyone_can_search", "requires_signup_codes", "max_signup_codes_per_user", "mailgun_config", "twilio_config", "firebase_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mailgun_config
        if self.mailgun_config:
            _dict['mailgun_config'] = self.mailgun_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of twilio_config
        if self.twilio_config:
            _dict['twilio_config'] = self.twilio_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firebase_config
        if self.firebase_config:
            _dict['firebase_config'] = self.firebase_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "user_id_type": obj.get("user_id_type"),
            "owner_universal_id": obj.get("owner_universal_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "logo_url": obj.get("logo_url"),
            "website_url": obj.get("website_url"),
            "language_tag": obj.get("language_tag"),
            "max_users": obj.get("max_users"),
            "anyone_can_search": obj.get("anyone_can_search"),
            "requires_signup_codes": obj.get("requires_signup_codes"),
            "max_signup_codes_per_user": obj.get("max_signup_codes_per_user"),
            "mailgun_config": MailgunConfigDto.from_dict(obj["mailgun_config"]) if obj.get("mailgun_config") is not None else None,
            "twilio_config": TwilioConfigDto.from_dict(obj["twilio_config"]) if obj.get("twilio_config") is not None else None,
            "firebase_config": FirebaseConfigDto.from_dict(obj["firebase_config"]) if obj.get("firebase_config") is not None else None
        })
        return _obj


